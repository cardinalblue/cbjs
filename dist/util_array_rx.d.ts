import { BehaviorSubject, Observable, OperatorFunction } from "rxjs";
import { Comparable } from "./util_rx";
export declare function cachedMapperArray<TFrom, K, TTo>(keyF: (t: TFrom) => K, createF: (t: TFrom) => TTo, disposeF?: (t: TTo) => void): ((from: Array<TFrom>) => Array<TTo>);
export declare function arraySubjectAdd<T>(subject: BehaviorSubject<Array<T>>, t: T): void;
export declare function arraySubjectRemove<T>(subject: BehaviorSubject<Array<T>>, t: T): void;
export declare function added<T>(): (source: Observable<Array<T>>) => Observable<Array<T>>;
export declare function removed<T>(): (source: Observable<Array<T>>) => Observable<Array<T>>;
export declare function undiff<T>(added$: Observable<Array<T>>, removed$: Observable<Array<T>>, seed?: Array<T>): Observable<Array<T>>;
export declare function sortingMap<X, C extends (Comparable<C> | number)>(comparatorF: (x: X) => Observable<C>): (source: Observable<X[]>) => Observable<X[]>;
export declare function mergingMap<T, R>(inner: (t: T, merging: (output$: Observable<R>) => void) => Observable<R>): OperatorFunction<T, R>;
export declare function arrayMap<X, C>(mapper: (m: X) => Observable<C>): (source: Observable<X[]>) => Observable<C[]>;
export declare function arrayFilterMap<X>(mapper: (m: X) => Observable<Boolean>): (source: Observable<X[]>) => Observable<X[]>;
